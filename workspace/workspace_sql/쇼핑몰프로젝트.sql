
#도서 쇼핑몰 프로젝트 테이블

#1. 회원 테이블
#2. 도서 카테고리 테이블
#3. 도서 정보 테이블
#4. 구매 테이블
#5. 장바구니 테이블

#회원 테이블
CREATE TABLE SHOP_MEMBER (
	MEM_ID VARCHAR(20) PRIMARY KEY,
	MEM_NAME VARCHAR(20) NOT NULL,
	MEM_TEL VARCHAR(20),              #010-1111-2222
	MEM_ADDR VARCHAR(50),
	ADDR_DETAIL VARCHAR(50),
	MEM_EMAIL VARCHAR(50) UNIQUE,
	MEM_PW VARCHAR(20) NOT NULL,
	MEM_ROLE VARCHAR(10) NOT NULL DEFAULT 'USER',  #ADMIN, USER
	JOIN_DATE DATETIME DEFAULT SYSDATE()
);

SELECT * FROM shop_member;

#2. 도서 카테고리 테이블
CREATE TABLE BOOK_CATEGORY(
	CATE_NUM INT PRIMARY KEY AUTO_INCREMENT,
	CATE_NAME VARCHAR(20) NOT NULL UNIQUE
);

INSERT INTO BOOK_CATEGORY VALUES (1, '소설');
INSERT INTO BOOK_CATEGORY VALUES (2, '인터넷/IT');
INSERT INTO BOOK_CATEGORY VALUES (3, '자기계발');
COMMIT;

SELECT * FROM book_category;

#3. 도서 정보 테이블
CREATE TABLE book(
	BOOK_NUM INT PRIMARY KEY AUTO_INCREMENT,
	TITLE VARCHAR(20) NOT NULL,
	PUBLISHER VARCHAR(20) NOT NULL,
	PRICE INT NOT NULL,
	REG_DATE DATETIME DEFAULT SYSDATE(), #쇼핑몰에 상품 등록한 날짜\
	BOOK_INTRO VARCHAR(50),
	CATE_NUM INT REFERENCES BOOK_CATEGORY (CATE_NUM)	
);

#도서 이미지 정보 테이블
CREATE TABLE BOOK_IMG(
	IMG_NUM INT PRIMARY KEY AUTO_INCREMENT,
	ORIGIN_IMG_NAME VARCHAR(100),    #원본 파일명
	ATTACHED_IMG_NAME VARCHAR(100),  #첨부된 파일명
	BOOK_NUM INT REFERENCES book (BOOK_NUM) ON DELETE CASCADE, #이미지의 원본 도서 번호 
	IS_MAIN VARCHAR(3) #메인이미지 : 'Y', 서브이미지 : 'N'
);		

SELECT * FROM book;

#4. 장바구니 테이블
CREATE TABLE SHOP_CART(
	CART_NUM INT PRIMARY KEY AUTO_INCREMENT,
	BOOK_NUM INT REFERENCES book (BOOK_NUM),
	CART_CNT INT NOT NULL, #장바구니에 담은 도서 수량
	MEM_ID VARCHAR(20) REFERENCES shop_member (MEM_ID),
	TOTAL_PRICE INT NOT NULL,
	CART_DATE DATETIME DEFAULT SYSDATE()
);

#5. 구매 정보 테이블
CREATE TABLE SHOP_BUY(
	BUY_NUM INT PRIMARY KEY AUTO_INCREMENT,
	BOOK_NUM INT REFERENCES book(BOOK_NUM),
	MEM_ID VARCHAR(20) REFERENCES shop_member(MEM_ID),
	BUY_DATE DATETIME DEFAULT SYSDATE(),
	BUY_CNT INT,
	ORDER_NUM INT #주문번호. 한 번에 여러 상품을 구매하면 동일한 주문번호를 가짐
);


SELECT * FROM SHOP_BUY;

UPDATE shop_member
SET
	MEM_PW = '1111'
WHERE MEM_ID = '2';	

COMMIT;

#장바구니에 저장된 상품명, 가격, 수량, 총가격, 등록일
SELECT
	TITLE,
	PRICE,
	CART_NUM,
	CART_CNT,
	TOTAL_PRICE,
	CART_DATE,
	C.BOOK_NUM
FROM shop_cart C INNER JOIN book B
ON C.BOOK_NUM = B.BOOK_NUM
WHERE MEM_ID = 'user'
ORDER BY CART_DATE DESC;
	
SELECT CART_NUM
FROM shop_cart
WHERE BOOK_NUM = 2
AND MEM_ID = 'user';

UPDATE shop_cart
SET
	CART_CNT= CART_CNT + 2,
	TOTAL_PRICE = (
		SELECT PRICE
		FROM BOOK
		WHERE BOOK_NUM = 1
	) * (CART_CNT + 2)
WHERE MEM_ID = ''
AND BOOK_NUM = 1;
	

#BOOK_IMG 테이블에 데이터 추가
INSERT INTO book_img(ORIGIN_IMG_NAME, ATTACHED_IMG_NAME, BOOK_NUM, IS_MAIN)
VALUES
('abc.jpg', 'aaa-bbb.jpg', 1, 'y'),
('abc.jpg', 'aaa-bbb.jpg', 1, 'y'),
('abc.jpg', 'aaa-bbb.jpg', 1, 'y');

SELECT * FROM book_img;
ROLLBACK;

SELECT * FROM book;

#다음에 들어갈 book_num을 조회 (최대 book_num +1)
SELECT MAX(BOOK_NUM)+1 FROM book;
SELECT IFNULL(MAX(BOOK_NUM), 0) +1 FROM book;

DELETE FROM book_img;
DELETE FROM shop_cart;
DELETE FROM book;
COMMIT;

SELECT * FROM book;
SELECT * FROM book_img;

#도서의 제목, 가격, 메인이미지명
SELECT B.BOOK_NUM, TITLE, PRICE, ATTACHED_IMG_NAME
FROM book B INNER JOIN book_img I
ON B.BOOK_NUM = I.BOOK_NUM
WHERE IS_MAIN = 'Y';

SELECT
   B.BOOK_NUM,
   TITLE,
   PUBLISHER,
   PRICE,
   BOOK_INTRO,
   ATTACHED_IMG_NAME,
   IS_MAIN
FROM book B INNER JOIN book_img I
ON B.BOOK_NUM = I.BOOK_NUM
WHERE B.BOOK_NUM = 1
ORDER BY IS_MAIN DESC;


SELECT
   TITLE,
   PRICE,
   CART_NUM,
   CART_CNT,
   TOTAL_PRICE,
   CART_DATE,
   C.BOOK_NUM,
   ATTACHED_IMG_NAME
FROM shop_cart C INNER JOIN book B 
ON C.BOOK_NUM = B.BOOK_NUM
INNER JOIN BOOK_IMG I
ON I.BOOK_NUM = B.BOOK_NUM
WHERE MEM_ID = 'user'
ORDER BY CART_DATE DESC;

SELECT * FROM shop_cart;

UPDATE SHOP_CART
SET
   CART_CNT= 10,
   TOTAL_PRICE = ( SELECT PRICE
                   FROM BOOK
                   WHERE BOOK_NUM = 6) * CART_CNT
WHERE CART_NUM = 14;

COMMIT;

INSERT INTO SHOP_BUY (BOOK_NUM, MEM_ID, BUY_CNT)
VALUES
(
	(SELECT BOOK_NUM FROM shop_cart WHERE CART_NUM = 1), 
	'USER', 
	(SELECT CART_CNT FROM shop_cart WHERE CART_NUM =1)
),
(),
();

SELECT * FROM shop_buy;

SELECT 
	ORDER_NUM,
	MAX(MEM_ID) MEM_ID,
	SUM((SELECT PRICE FROM book WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT) PRICE,
	MAX(BUY_DATE) BUY_DATE,
	CASE COUNT(ORDER_NUM)-1
		WHEN 0 THEN MAX((SELECT TITLE 
							FROM book 
							WHERE BOOK_NUM = shop_buy.BOOK_NUM))
		ELSE CONCAT(MAX((SELECT TITLE 
							FROM book WHERE BOOK_NUM = shop_buy.BOOK_NUM)),
							' 외 ',
							COUNT(ORDER_NUM)-1,
							'건')
	END TITLE
FROM shop_buy
WHERE 1 = 1
AND ORDER_NUM = 1
AND MEM_ID LIKE '%user%'
AND BUY_DATE >= '2025-09-02'
AND BUY_DATE <= ADDDATE('2025-09-03',1) 
GROUP BY ORDER_NUM 
ORDER BY BUY_DATE DESC;

SELECT * FROM shop_buy;

SELECT 
	BUY_NUM,
	BUY_CNT,
	TITLE,
	PRICE,
	PRICE * BUY_CNT AS TOTAL_PRICE,
	ATTACHED_IMG_NAME
FROM shop_buy S INNER JOIN book B
ON S.BOOK_NUM = B.BOOK_NUM
INNER JOIN book_img I
ON S.BOOK_NUM = I.BOOK_NUM
WHERE IS_MAIN = 'Y'
AND ORDER_NUM = 3;

#최근 10일에 해당하는 날짜를 조회
SELECT 
	ADDDATE(CURRENT_DATE(), -9) AS RECENT_DATE
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -8)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -7)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -6)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -5)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -4)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -3)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -2)
	UNION ALL
	SELECT ADDDATE(CURRENT_DATE(), -1)
	UNION ALL
	SELECT CURRENT_DATE();
	
#오늘의 매출
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -9)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -8)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -7)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -6)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -5)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -4)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -3)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -2)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = ADDDATE(CURRENT_DATE(), -1)
UNION ALL
SELECT 
	IFNULL(SUM((SELECT PRICE
					FROM BOOK
					WHERE BOOK_NUM = shop_buy.BOOK_NUM) * BUY_CNT), 0) AS TOTALPRICE
FROM shop_buy
WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') = CURRENT_DATE();


#UNION ALL
#여러 셀렉트 문을 하나의 셀렉트문처럼 동시 실행
SELECT ENAME FROM emp WHERE EMPNO = 1001
UNION ALL
SELECT ENAME FROM emp WHERE EMPNO = 1002
UNION ALL
SELECT ENAME FROM emp WHERE EMPNO = 1003;

